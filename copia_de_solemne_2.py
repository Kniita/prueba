# -*- coding: utf-8 -*-
"""Copia de Solemne 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nshnDu2Hu2vPBi4FA3tFPMILVm41eb18

PASO 1: Leer las bases de datos proporcionadas. Asegúrate de revisar las primeras filas y la estructura de las bases de datos
"""

import pandas as pd

archivo_demografia = "/content/Ensdemografia.xlsx"
archivo_fechas = "/content/ENSfechas.xlsx"
archivo_extendidas = "/content/ENSextendida.xlsx"

df_demografia = pd.read_excel(archivo_demografia)
df_fechas = pd.read_excel(archivo_fechas)
df_extendidas = pd.read_excel(archivo_extendidas)

print("demografia Dataframe:")
print(df_demografia)
print("Fechas DataFrame")
print(df_fechas)
print("extendida DataFrame")
print(df_extendidas)

"""PASO 2: Realiza una unión de las tres bases de datos, garantizando que estén presentes todas las columnas y datos de las tres tablas. Investigue cómo usar la función merge() de pandas para hacer esto"""

merged_df = pd.merge(df_demografia, df_fechas, on="ID", how="outer")
merged_df = pd.merge(merged_df, df_extendidas, on="ID", how="outer")

print(merged_df.head())

"""PASO 3: Utilice el codebook "ENS_F1_corr8Mayo.pdf entregado para buscar el significado de las columnas con las etiquetas “cd7”, “ps7_F1” y “n2”. Luego, investigue cómo cambiar los nombres de las columnas codificadas, reemplazándolos por nombres descriptivos que representen el significado de los datos que contienen"""

merged_df.rename(columns={'cd7': 'Nivel_de_Depresion', 'ps7_F1': 'Escala_de_Satisfaccion', 'n2': 'Estado_de_Salud'
}, inplace=True)

print(merged_df.head())

"""PASO 4:  Realiza la limpieza de los valores faltantes en la base de datos, imputando o eliminando los valores según corresponda. Considera eliminar la menor cantidad de sujetos posible. Argumenta la metodología de limpieza de datos"""

numeric_cols = merged_df.select_dtypes(include='number').columns
merged_df[numeric_cols] = merged_df[numeric_cols].fillna(merged_df[numeric_cols].mean())
categorical_cols = merged_df.select_dtypes(include='object').columns
for col in categorical_cols:

    merged_df[col] = merged_df[col].fillna(merged_df[col].mode()[0])

"""PASO 5: Basado en el paso 4, realiza el conteo por columna de cuántos casos (ejemplos, pacientes o filas) fueron imputados, y especifica cuántas columnas fueron eliminadas."""

conteo_faltantes = merged_df.isnull().sum()
print("Valores faltantes por columna:\n", conteo_faltantes)

"""PASO 6:  Crea una figura que contenga dos gráficos. A la derecha, construye un gráfico que muestre la distribución de edades en la población. A la izquierda, crea el gráfico adecuado para visualizar la proporción entre hombres y mujeres de la población. Justifica la elección del tipo de gráfico e interpreta los resultados obtenidos"""

import matplotlib.pyplot as plt
sexos = merged_df['Sexo'].value_counts()
plt.figure(figsize=(12, 6))


plt.subplot(1, 2, 2)
plt.hist(merged_df["Edad"], bins=20, color='pink', edgecolor='black')
plt.title("Distribución de Edades en la Población")
plt.xlabel("Edad")
plt.ylabel("Número de Personas")
plt.grid(True)


plt.subplot(1, 2, 1)
plt.bar(sexos.index, sexos.values, color=["red", "blue"])
plt.title("Proporción de Hombres y Mujeres en la Población")
plt.xlabel("Sexo")
plt.ylabel("Número de Personas")
plt.xticks(sexos.index, ["Hombres", "Mujeres"])
plt.grid(True)

plt.tight_layout()
plt.show()

"""PASO 7: Construye un gráfico de línea que muestre la evolución de la edad promedio de los
entrevistados a lo largo de las diferentes zonas geográficas. Asegúrate de calcular la edad promedio
por zona geográfica
"""

edad_promedio_por_zona = merged_df.groupby('Zone')['Edad'].mean().reset_index()

plt.figure(figsize=(12, 6))

plt.plot(edad_promedio_por_zona['Zone'], edad_promedio_por_zona['Edad'], marker='o', color='blue')
plt.title("Evolución de la Edad Promedio por Zona Geográfica")
plt.xlabel("Zona Geográfica")
plt.ylabel("Edad Promedio")
plt.xticks(rotation=45)
plt.grid(True)

plt.tight_layout()
plt.show()

"""PASO 8: De los sujetos que tienen 60 años o más, diga cuántas son mujeres y cuántos son hombres"""

import pandas as pd

merged_df_60 = merged_df[merged_df['Edad'] >= 60]
conteo_por_genero = merged_df_60['Sexo'].value_counts()

resultado = pd.DataFrame({
    'Sexo': conteo_por_genero.index.map({1: 'Mujer', 2: 'Hombre'}),
    'Conteo': conteo_por_genero.values})


print(resultado)

"""PASO 9: Muestra la edad, sexo y comuna de los 10 entrevistados más jóvenes"""

entrevistados_jovenes = merged_df.nsmallest(10, "Edad")
resultados_jovenes = entrevistados_jovenes[["Edad", "Sexo", "Comuna"]]

print(resultados_jovenes)

"""PASO 10: Construya un gráfico que permita conocer la relación entre los años de edad y la educación
en la población en estudio. Justifica e interpreta la utilización del gráfico.
"""

import seaborn as sns

plt.figure(figsize=(12, 6))
sns.scatterplot(data=merged_df, x="Edad", y="Educacion", hue="Sexo", palette="Set2")

plt.title("Distribución de Educación por Edad")
plt.xlabel("Edad")
plt.ylabel("Nivel Educativo")
plt.legend(title="Sexo")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""PASO 11: Construya un gráfico que muestre el porcentaje de participación en la encuesta a partir dela zona geográfica. Justifica e interpreta la utilización del gráfico"""

zone_participation = merged_df.groupby("Zone")["Unnamed: 0_x"].count() / len(merged_df) * 100

plt.figure(figsize=(8, 8))
plt.pie(zone_participation.values, labels=zone_participation.index, autopct="%1.1f%%")

plt.title("Participación en la Encuesta por Zona")
plt.show()

"""PASO 12:  Calcule la cantidad total de personas que tienen depresión, la cantidad de mujeres que tienen depresión y la cantidad de hombres que tienen depresión. Con esta información construya un gráfico e interprete el resultado"""

siu_depresion = 1

total_depresion = (merged_df["Nivel_de_Depresion"] > siu_depresion).sum()
total_depresion_mujeres = merged_df[(merged_df["Sexo"] == 1) & (merged_df["Nivel_de_Depresion"] > siu_depresion)].shape[0]
total_depresion_hombres = merged_df[(merged_df["Sexo"] == 2) & (merged_df["Nivel_de_Depresion"] > siu_depresion)].shape[0]

nivel_moderado = (merged_df["Nivel_de_Depresion"] == 2).sum()
nivel_alto = (merged_df["Nivel_de_Depresion"] == 3).sum()

print(f"Total de personas con depresión: {total_depresion}")
print(f"Total de mujeres con depresión: {total_depresion_mujeres}")
print(f"Total de hombres con depresión: {total_depresion_hombres}")
print(f"Total de personas con depresión moderada: {nivel_moderado}")
print(f"Total de personas con depresión alta: {nivel_alto}")

categorias = ['Total', 'Mujeres', 'Hombres']
valores = [total_depresion, total_depresion_mujeres, total_depresion_hombres]

plt.figure(figsize=(8, 5))
plt.bar(categorias, valores, color=['blue', 'pink', 'lightblue'])
plt.title('Cantidad de Personas con Depresión')
plt.xlabel('Categorías')
plt.ylabel('Número de Personas')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""PASO 13: Encuentre las mujeres mayores a 50 años de edad de la región metropolitana que han reportado tener depresión"""

mujeres_mayores_50_depresion = merged_df[
    (merged_df["Sexo"] == 1) &
    (merged_df["Edad"] > 50) &
    (merged_df["Nivel_de_Depresion"] > siu_depresion) &
    (merged_df["Zone"] == 1)
]
cantidad_mujeres_mayores_50_depresion = mujeres_mayores_50_depresion.shape[0]

print(f"Número de mujeres mayores de 50 años con depresión en la región metropolitana : {cantidad_mujeres_mayores_50_depresion}")

"""PASO 14: Vivir con más o menos personas puede influir en el estado emocional. Clasifique a los sujetos en 3 grupos según la cantidad de personas con las que viven:

 Grupo 1: Personas que viven con 1-2 personas.
 Grupo 2: Personas que viven con 3-5 personas.
 Grupo 3: Personas que viven con más de 5 personas.

Luego, construya un gráfico de barras que muestre la cantidad de personas en cada grupo e interprete los resultados obtenidos
"""

def clasificar_grupo(cantidad_personas):
    if cantidad_personas >= 1 and cantidad_personas <= 2:
        return 'Grupo 1: 1-2 personas'
    elif cantidad_personas >= 3 and cantidad_personas <= 5:
        return 'Grupo 2: 3-5 personas'
    elif cantidad_personas > 5:
        return 'Grupo 3: Más de 5 personas'
    else:
        return 'No clasificado'
merged_df['Grupo'] = merged_df['cantidad_personas_por_hogar'].apply(clasificar_grupo)
conteo_grupos = merged_df['Grupo'].value_counts()

plt.figure(figsize=(10, 6))

conteo_grupos.plot(kind='bar', color=['#4CAF50', '#2196F3', '#FFC107'])

plt.title('Cantidad de Personas en Cada Grupo según la Cantidad de Personas con las que Viven')
plt.xlabel('Grupos')
plt.ylabel('Cantidad de Personas')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

print("Interpretación de los resultados:")
for grupo, cantidad in conteo_grupos.items():
    print(f"{grupo}: {cantidad} personas")

"""PASO 15: La columna “fecha_ingreso” contiene la fecha en que fue tomada la encuesta, y la columna “fecha_actual” registra la fecha actual. Revisa la clase 11 y luego calcula la cantidad de años transcurridos entre la fecha en que se tomó la encuesta y la fecha actual. Crea una nueva columna en el dataframe con esta información. Finalmente, calcula el promedio, el valor mínimo y el valor
máximo de los años transcurridos.
"""

merged_df['Fecha_ingreso'] = pd.to_datetime(merged_df['Fecha_ingreso'])
merged_df['Fecha_actual'] = pd.to_datetime(merged_df['Fecha_actual'])

merged_df['años_transcurridos'] = (merged_df['Fecha_actual'] - merged_df['Fecha_ingreso']).dt.days / 365

promedio_años = merged_df['años_transcurridos'].mean()
min_años = merged_df['años_transcurridos'].min()
max_años = merged_df['años_transcurridos'].max()

print(f"Promedio de años transcurridos: {promedio_años:.2f}")
print(f"Valor mínimo de años transcurridos: {min_años:.2f}")
print(f"Valor máximo de años transcurridos: {max_años:.2f}")